diff --git a/CMake/FollyConfigChecks.cmake b/CMake/FollyConfigChecks.cmake
index 3b365b3..fc4ae2e 100644
--- a/CMake/FollyConfigChecks.cmake
+++ b/CMake/FollyConfigChecks.cmake
@@ -6,7 +6,8 @@ include(CheckSymbolExists)
 include(CheckTypeSize)
 include(CheckCXXCompilerFlag)
 
-CHECK_INCLUDE_FILE_CXX(jemalloc/jemalloc.h FOLLY_USE_JEMALLOC)
+# NOTE: fixes https://github.com/facebook/folly/issues/1261
+# CHECK_INCLUDE_FILE_CXX(jemalloc/jemalloc.h FOLLY_USE_JEMALLOC)
 
 if(NOT CMAKE_SYSTEM_NAME STREQUAL "Windows")
   # clang only rejects unknown warning flags if -Werror=unknown-warning-option
diff --git a/CMake/folly-config.h.cmake b/CMake/folly-config.h.cmake
index 343bd75..cdfb5a5 100644
--- a/CMake/folly-config.h.cmake
+++ b/CMake/folly-config.h.cmake
@@ -35,7 +35,9 @@
 
 #cmakedefine FOLLY_HAVE_LIBGLOG 1
 
-#cmakedefine FOLLY_USE_JEMALLOC 1
+// NOTE: fixes https://github.com/facebook/folly/issues/1261
+// #cmakedefine FOLLY_USE_JEMALLOC 1
+
 #cmakedefine FOLLY_USE_LIBSTDCPP 1
 
 #if __has_include(<features.h>)
diff --git a/CMake/folly-deps.cmake b/CMake/folly-deps.cmake
index 437c0cd..70e3270 100644
--- a/CMake/folly-deps.cmake
+++ b/CMake/folly-deps.cmake
@@ -2,19 +2,17 @@ include(CheckCXXSourceCompiles)
 include(CheckIncludeFileCXX)
 include(CheckFunctionExists)
 
-find_package(Boost 1.51.0 MODULE
-  COMPONENTS
-    context
-    chrono
-    date_time
-    filesystem
-    program_options
-    regex
-    system
-    thread
-  REQUIRED
-)
+# NOTE: we use boost from conan
+find_package( Boost 1.71.0
+  COMPONENTS program_options filesystem regex date_time system thread graph
+  EXACT REQUIRED )
+if(NOT TARGET CONAN_PKG::boost)
+  message(FATAL_ERROR "Use boost from conan")
+endif()
+message(STATUS "Boost_LIBRARIES=${Boost_LIBRARIES}")
+message(STATUS "Boost_INCLUDE_DIRS=${Boost_INCLUDE_DIRS}")
 list(APPEND FOLLY_LINK_LIBRARIES ${Boost_LIBRARIES})
+# NOTE: make sure that include dirs from conan are used first
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIRS})
 
 find_package(DoubleConversion MODULE REQUIRED)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7ee5003..291bd59 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,6 +23,33 @@ set_property(GLOBAL PROPERTY USE_FOLDERS ON)
 
 project(${PACKAGE_NAME} CXX C)
 
+# --------------------------- conan configuration ------------------------------
+
+# Conan package manager List of packages used by the project is container in
+# conanfile.py
+option(CONAN_AUTO_INSTALL "Let CMake call conan install automatically" OFF)
+if (CONAN_AUTO_INSTALL)
+  set(CONAN_PROFILE
+      "default"
+      CACHE STRING "Conan profile to use during installation")
+  include(cmake/conan-auto-install.cmake)
+  conan_auto_install(${CONAN_PROFILE})
+endif()
+
+if(EXISTS "${CMAKE_BINARY_DIR}/conanbuildinfo.cmake")
+  list(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR}/)
+  include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
+  include(${CMAKE_BINARY_DIR}/conan_paths.cmake OPTIONAL)
+  conan_basic_setup(
+    # prevent conan_basic_setup from resetting cmake variables
+    TARGETS
+    KEEP_RPATHS
+    # see https://github.com/conan-io/conan/issues/6012
+    NO_OUTPUT_DIRS)
+else()
+  message (FATAL_ERROR "must use conan")
+endif()
+
 set(INCLUDE_INSTALL_DIR include CACHE STRING
     "The subdirectory where header files should be installed")
 set(LIB_INSTALL_DIR lib CACHE STRING
@@ -349,7 +376,19 @@ if (BUILD_TESTS)
   )
   target_link_libraries(folly_test_support
     PUBLIC
-      ${BOOST_LIBRARIES}
+      Boost::thread
+      Boost::context
+      Boost::boost
+      Boost::atomic
+      Boost::chrono
+      Boost::date_time
+      Boost::filesystem
+      Boost::graph
+      Boost::program_options
+      Boost::regex
+      Boost::system
+      Boost::thread
+      #${BOOST_LIBRARIES} # NOTE: we use boost from conan
       follybenchmark
       folly
       ${LIBGMOCK_LIBRARIES}
diff --git a/conanfile.py b/conanfile.py
new file mode 100644
index 0000000..b7e66f0
--- /dev/null
+++ b/conanfile.py
@@ -0,0 +1,182 @@
+ï»¿from conans import ConanFile, CMake, tools
+import traceback
+import os
+import shutil
+
+# conan runs the methods in this order:
+# config_options(),
+# configure(),
+# requirements(),
+# package_id(),
+# build_requirements(),
+# build_id(),
+# system_requirements(),
+# source(),
+# imports(),
+# build(),
+# package(),
+# package_info()
+
+class folly_conan_project(ConanFile):
+    name = "folly"
+
+    # Indicates License type of the packaged library
+    # TODO (!!!)
+    # license = "MIT"
+
+    version = "master"
+
+    # TODO (!!!)
+    #url = "https://github.com/blockspacer/CXXCTP"
+
+    description = "`folly` library"
+    topics = ('c++')
+
+    options = {
+        "shared": [True, False],
+        "debug": [True, False],
+        "enable_tests": [True, False],
+        "enable_sanitizers": [True, False]
+    }
+
+    default_options = (
+        "shared=False",
+        "debug=False",
+        "enable_tests=False",
+        "enable_sanitizers=False"
+        # build
+        #"*:shared=False"
+    )
+
+    # Custom attributes for Bincrafters recipe conventions
+    _source_subfolder = "."
+    _build_subfolder = "build_subfolder"
+
+    # NOTE: no cmake_find_package due to custom FindXXX.cmake
+    generators = "cmake", "cmake_paths", "virtualenv"
+
+    # Packages the license for the conanfile.py
+    #exports = ["LICENSE.md"]
+
+    # If the source code is going to be in the same repo as the Conan recipe,
+    # there is no need to define a `source` method. The source folder can be
+    # defined like this
+    exports_sources = ("LICENSE", "*.md", "include/*", "src/*",
+                       "cmake/*", "CMakeLists.txt", "tests/*", "benchmarks/*",
+                       "scripts/*", "tools/*", "codegen/*", "assets/*",
+                       "docs/*", "licenses/*", "patches/*", "resources/*",
+                       "submodules/*", "thirdparty/*", "third-party/*",
+                       "base/*")
+
+    settings = "os", "compiler", "build_type", "arch"
+
+    #def source(self):
+    #  url = "https://github.com/....."
+    #  self.run("git clone %s ......." % url)
+
+    def configure(self):
+        if self.settings.os == "Emscripten":
+           self.options.use_system_zlib = "True"
+
+    def build_requirements(self):
+        #self.build_requires("cmake_platform_detection/master@conan/stable")
+        #self.build_requires("cmake_build_options/master@conan/stable")
+
+        if self.options.enable_tests:
+            self.build_requires("catch2/[>=2.1.0]@bincrafters/stable")
+            self.build_requires("gtest/[>=1.8.0]@bincrafters/stable")
+            self.build_requires("FakeIt/[>=2.0.4]@gasuketsu/stable")
+
+    def requirements(self):
+        # NOTE: same as self.requires("glm/0.9.9.1@g-truc/stable")
+        #self.requires("cobalt_glm/0.9.9.1@conan/stable")
+        self.requires("boost/1.71.0@conan/stable")
+
+    def _configure_cmake(self):
+        cmake = CMake(self)
+        cmake.parallel = True
+        cmake.verbose = True
+
+        if self.options.shared:
+            cmake.definitions["BUILD_SHARED_LIBS"] = "ON"
+
+        def add_cmake_option(var_name, value):
+            value_str = "{}".format(value)
+            var_value = "ON" if value_str == 'True' else "OFF" if value_str == 'False' else value_str
+            cmake.definitions[var_name] = var_value
+
+        add_cmake_option("ENABLE_SANITIZERS", self.options.enable_sanitizers)
+
+        add_cmake_option("ENABLE_TESTS", self.options.enable_tests)
+
+        cmake.configure(build_folder=self._build_subfolder)
+
+        return cmake
+
+    def package(self):
+        self.copy(pattern="LICENSE", dst="licenses", src=self._source_subfolder)
+        cmake = self._configure_cmake()
+        cmake.install()
+
+    def build(self):
+        cmake = self._configure_cmake()
+        if self.settings.compiler == 'gcc':
+            cmake.definitions["CMAKE_C_COMPILER"] = "gcc-{}".format(
+                self.settings.compiler.version)
+            cmake.definitions["CMAKE_CXX_COMPILER"] = "g++-{}".format(
+                self.settings.compiler.version)
+
+        #cmake.definitions["CMAKE_TOOLCHAIN_FILE"] = 'conan_paths.cmake'
+
+        # The CMakeLists.txt file must be in `source_folder`
+        cmake.configure(source_folder=".")
+
+        cpu_count = tools.cpu_count()
+        self.output.info('Detected %s CPUs' % (cpu_count))
+
+        # -j flag for parallel builds
+        cmake.build(args=["--", "-j%s" % cpu_count])
+
+        if self.options.enable_tests:
+          self.output.info('Running tests')
+          self.run('ctest --parallel %s' % (cpu_count))
+          # TODO: use cmake.test()
+
+    # Importing files copies files from the local store to your project.
+    def imports(self):
+        dest = os.getenv("CONAN_IMPORT_PATH", "bin")
+        self.output.info("CONAN_IMPORT_PATH is ${CONAN_IMPORT_PATH}")
+        self.copy("license*", dst=dest, ignore_case=True)
+        self.copy("*.dll", dst=dest, src="bin")
+        self.copy("*.so*", dst=dest, src="bin")
+        self.copy("*.pdb", dst=dest, src="lib")
+        self.copy("*.dylib*", dst=dest, src="lib")
+        self.copy("*.lib*", dst=dest, src="lib")
+        self.copy("*.a*", dst=dest, src="lib")
+
+    # package_info() method specifies the list of
+    # the necessary libraries, defines and flags
+    # for different build configurations for the consumers of the package.
+    # This is necessary as there is no possible way to extract this information
+    # from the CMake install automatically.
+    # For instance, you need to specify the lib directories, etc.
+    def package_info(self):
+        #self.cpp_info.libs = ["folly"]
+
+        self.cpp_info.includedirs = ["include"]
+        self.cpp_info.libs = tools.collect_libs(self)
+        self.cpp_info.libdirs = ["lib"]
+        self.cpp_info.bindirs = ["bin"]
+        self.env_info.LD_LIBRARY_PATH.append(
+            os.path.join(self.package_folder, "lib"))
+        self.env_info.PATH.append(os.path.join(self.package_folder, "bin"))
+        for libpath in self.deps_cpp_info.lib_paths:
+            self.env_info.LD_LIBRARY_PATH.append(libpath)
+
+        # in linux we need to link also with these libs
+        #if self.settings.os == "Linux":
+        #    self.cpp_info.libs.extend(["pthread", "dl", "rt"])
+
+        #self.cpp_info.libs = tools.collect_libs(self)
+        #self.cpp_info.defines.append('PDFLIB_DLL')
+
